#!/usr/bin/env python3
#
# Copyright (c) 2005-2022 Citrix Systems Inc.
# Copyright (c) 2022-2023 Cloud Software Group, Inc.
#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU Lesser General Public License as published 
# by the Free Software Foundation; version 2.1 only.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
import sys
sys.path.append("/opt/xensource/debug/XenCert/sm")
import util
import xen.lowlevel.xs
import random

from XenCertLog import xencert_print

def help():
    print("Usage: blockunblockiscsipaths <block/unblock> <noOfPaths> <IP1>,<IP2>,...")
    sys.exit(-1)

def is_firewall_enabled():
    try:
        cmd = ['firewall-cmd', '--state']
        state = util.pread(cmd).strip()
        return state == 'running'
    except Exception as e:
        xencert_print("Exception checking firewall state: %s" % str(e))
        return False

def block_ip(ip):
    try:
        if is_firewall_enabled():
            cmd = ['firewall-cmd', '--permanent', '--add-rich-rule',
                   'rule family="ipv4" source address="%s" reject' % ip]
            util.pread(cmd)
            cmd = ['firewall-cmd', '--reload']
            util.pread(cmd)
        else:
            cmd = ['iptables', '-A', 'OUTPUT', '-d', ip, '-j', 'DROP']
            util.pread(cmd)
            cmd = ['iptables', '-A', 'INPUT', '-s', ip, '-j', 'DROP']
            util.pread(cmd)
    except Exception as e:
        util.SMlog("There was an exception in blocking ip: %s" % ip)

def unblock_ip(ip):
    try:
        if is_firewall_enabled():
            cmd = ['firewall-cmd', '--permanent', '--remove-rich-rule',
                   'rule family="ipv4" source address="%s" reject' % ip]
            util.pread(cmd)
            cmd = ['firewall-cmd', '--reload']
            util.pread(cmd)
        else:
            cmd = ['iptables', '-D', 'OUTPUT', '-d', ip, '-j', 'DROP']
            util.pread(cmd)
            cmd = ['iptables', '-D', 'INPUT', '-s', ip, '-j', 'DROP']
            util.pread(cmd)
    except Exception as e:
        util.SMlog("There was an exception in unblocking ip: %s" % ip)

# Test Cmdline args
xencert_print("Entering blockunblockiscsipaths")
if len(sys.argv) != 4:
    help()

op = sys.argv[1]
no = sys.argv[2]
ipList = sys.argv[3].split(',')
    
if op == 'block':
    newList = random.sample(ipList, int(no))
else:
    newList = ipList
    
paths = ''
for ip in newList:    
    if op == 'block':
        xencert_print('blockunblockiscsipaths - blocking ip %s' % ip)
        paths += ip
        block_ip(ip)
    elif op == 'unblock':
        xencert_print('blockunblockiscsipaths - unblocking ip %s' % ip)
        unblock_ip(ip)
    else:
        continue
    paths += ','

paths = paths.strip(',')

xs_handle = xen.lowlevel.xs.xs()
xs_handle.write('', '/xencert/block-unblock-over', '1')
del xs_handle

if op == 'block':
    sys.stdout.write(paths)
sys.exit(0)
