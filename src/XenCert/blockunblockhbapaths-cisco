#!/usr/bin/env python3
#
# Copyright (c) 2005-2022 Citrix Systems Inc.
# Copyright (c) 2022-2023 Cloud Software Group, Inc.
#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU Lesser General Public License as published 
# by the Free Software Foundation; version 2.1 only.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
import sys
sys.path.append("/opt/xensource/debug/XenCert/sm")
import utils
import xen.lowlevel.xs
import random
import os
from XenCertLog import xencert_print
import XenCertCommon


NO_OF_PATHS_PER_PORT = 1

def help():
    print("Usage: blockunblockhbapaths <block/unblock> <noOfPaths> switch-ip:username:password:port1,port2...")
    sys.exit(-1)
    
def blockUnblockPort(ssh, blockOrUnblock, ip, username, password, port):
    try:
        xencert_print("In blockUnblockPort with options: %s, %s, %s, %s" % (ip, username, XenCertCommon.HIDDEN_PASSWORD, port))
        if blockOrUnblock:
            cmd = [os.path.join(os.getcwd(),'blockunblockHBAPort-cisco.sh'), ip, username, password, port, 'shut']
        else:
            cmd = [os.path.join(os.getcwd(),'blockunblockHBAPort-cisco.sh'), ip, username, password, port, 'no shut']

        xencert_print("calling %s" % ' '.join(XenCertCommon.get_cmds_with_hidden_password(cmd)))
        utils.execSSH(ssh, cmd, '')
    except Exception as e:
        utils.SMlog("There was an exception in blocking port: %s, exception: %s" % (port, str(e)))

# Test Cmdline args
if len(sys.argv) != 4:
    help()

# Now extract all parameters from the command line
op = sys.argv[1]
ip = sys.argv[3].split(':')[0]
username = sys.argv[3].split(':')[1]
password = sys.argv[3].split(':')[2]
portList = sys.argv[3].split(':')[3].split(',')
sampled_portlist = portList

if op == 'block':
    sampled_portlist = random.sample(portList, random.randint(1, len(portList) - 1))
    xencert_print("Blocking ports: %s" % sampled_portlist)
    retVal=ip + ':' + username + ':' + password + ':'
    
for port in sampled_portlist:
    if op == 'block':
        blockUnblockPort(True, ip, username, password, port)
        retVal += port
        retVal += ','
    elif op == 'unblock':
        blockUnblockPort(False, ip, username, password, port)

xs_handle = xen.lowlevel.xs.xs()
xs_handle.write('', '/xencert/block-unblock-over', '1')
del xs_handle

if op == 'block':
    retVal = retVal.strip(',')
    retVal += '::'
    retVal += str(len(sampled_portlist) * NO_OF_PATHS_PER_PORT)
    retVal += ','
    retVal += str(len(portList) * NO_OF_PATHS_PER_PORT)
    password_index = len(ip) + len(username) + 2
    retVal_tmp = retVal[:password_index] + retVal[password_index:].replace(password, XenCertCommon.HIDDEN_PASSWORD, 1)
    xencert_print(retVal_tmp)
    sys.stdout.write(retVal)

sys.exit(0)
