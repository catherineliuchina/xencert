#!/usr/bin/python3 -u
#
# Copyright (c) 2005-2022 Citrix Systems Inc.
# Copyright (c) 2022-2023 Cloud Software Group, Inc.
#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU Lesser General Public License as published 
# by the Free Software Foundation; version 2.1 only.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

"""Manual Xen Certification script"""


import sys
#sys.path.append("/opt/xensource/debug/XenCert/sm")
from datetime import datetime
import time
import XenCertCommon
import StorageHandler
import utils
from XenCertLog import init_logging, uninit_logging, print_to_log, printout, get_log_file_name


version = "@KIT_VERSION@"

def main():
    """Main Routine"""

    pass_all = True
    g_storage_conf = {}
    init_logging()
    print_to_log("***********************************************************************\n")

    (options, args) = XenCertCommon.parse_args(version)
    # Convert legacy lvmoXXX storage types to their base type
    if options.storage_type:
        options.storage_type = options.storage_type.lstrip("lvmo")

    if args:
        printout("Unknown arguments found: %s" % args)
        sys.exit(1)

    print_to_log("The XenCert command executed is: \n\n")
    XenCertCommon.print_command(sys.argv)
    print_to_log('\n\n')

    if options.help:
        XenCertCommon.display_usage()
        return 0

    if not XenCertCommon.valid_arguments(options, g_storage_conf):
        return 1

    XenCertCommon.store_configuration(g_storage_conf, options)
    ssh = utils.get_ssh_client()
    # Now is the time to instantiate the right handler based on the
    # requested storage type and hand it over to the handler to
    # perform the certification process
    handler = StorageHandler.get_storage_handler(g_storage_conf, ssh)        
    build = utils.get_build_info(ssh)
    printout("********************** Welcome to XenCert %s %s *****************" % (version, build))
    printout("Test start time: %s" % time.asctime(time.localtime()))
    start = datetime.now()
    printout("***********************************************************************")  
    testAll = False

    if not options.functional and not options.control and not options.multipath and not options.pool and not options.data and not options.metadata:
        testAll = True
    
    if options.multipath or testAll:
        printout("Performing multipath configuration verification.")
        (retValMP, checkPointsMP, totalCheckPointsMP) = handler.mp_config_verification_tests()
        if checkPointsMP != totalCheckPointsMP:
            pass_all = False
        printout("***********************************************************************")
        timeOfCompletionMP = time.asctime(time.localtime())
    else:
        retValMP = None
        checkPointsMP = 0
        totalCheckPointsMP = 1
        timeOfCompletionMP = 0

    if options.control or testAll: 
        printout("Performing control path stress tests.")
        (retValControl, checkPointsControl, totalCheckPointsControl) = handler.control_path_stress_tests()
        if checkPointsControl != totalCheckPointsControl:
            pass_all = False
        printout("***********************************************************************")
        timeOfCompletionControl = time.asctime(time.localtime())
    else:
        retValControl = None
        checkPointsControl = 0
        totalCheckPointsControl = 1
        timeOfCompletionControl = 0

    if options.pool or testAll:
        printout("Performing pool tests to ensure consistency.")
        (retValPool, checkPointsPool, totalCheckPointsPool) = handler.pool_tests()
        if checkPointsPool != totalCheckPointsPool:
            pass_all = False
        printout("***********************************************************************")
        timeOfCompletionPool = time.asctime(time.localtime())

    if options.functional or testAll: 
        printout("Performing functional tests.")
        (retValFunctional, checkPointsFunctional, totalCheckPointsFunctional) = handler.functional_tests()
        if checkPointsFunctional != checkPointsFunctional:
            pass_all = False
        printout("***********************************************************************")
        timeOfCompletionFunctional = time.asctime(time.localtime())

    if options.data or testAll: 
        printout("Performing data IO tests.")
        (retValData, checkPointsData, totalCheckPointsData) = handler.data_integrity_tests()
        if checkPointsData != checkPointsData:
            pass_all = False
        printout("***********************************************************************")
        timeOfCompletionData = time.asctime(time.localtime())
    
    if options.metadata:
        printout("Performing metadata tests.")
        (retValMetadata, checkPointsMetaData, totalCheckPointsMetaData) = handler.meta_data_tests()
        printout("***********************************************************************")
        timeOfCompletionMetadata = time.asctime(time.localtime())

    # Now display all the results
    if options.multipath or testAll:
        printout("***********************************************************************")
        XenCertCommon.show_report('Multipath configuration verification results', retValMP, checkPointsMP, totalCheckPointsMP,
                   timeOfCompletionMP)

    if options.control or testAll:
        printout("***********************************************************************")
        XenCertCommon.show_report('Control path stress test results', retValControl, checkPointsControl, totalCheckPointsControl,
                   timeOfCompletionControl)

    if options.pool or testAll:
        printout("***********************************************************************")
        XenCertCommon.show_report('Pool test results', retValPool, checkPointsPool, totalCheckPointsPool, timeOfCompletionPool)

    if options.functional or testAll:
        printout("***********************************************************************")
        XenCertCommon.show_report('Functional test results', retValFunctional, checkPointsFunctional, totalCheckPointsFunctional,
                   timeOfCompletionFunctional)

    if options.data or testAll:         
        printout("***********************************************************************")
        XenCertCommon.show_report('Data test results', retValData, checkPointsData, totalCheckPointsData, timeOfCompletionData)
        
    if options.metadata:
        printout("***********************************************************************")
        XenCertCommon.show_report('Metadata test results', retValMetadata, checkPointsMetaData, totalCheckPointsMetaData, timeOfCompletionMetadata)

    printout("***********************************************************************")
    printout("End of XenCert certification suite.")
    printout("Please find the report for this test run at: %s" % get_log_file_name())
    printout("***********************************************************************")
    end = datetime.now()
    printout("Test end time: %s" % time.asctime(time.localtime()))
    timed = end - start
    hr = timed.seconds/3600
    min = timed.seconds%3600/60
    sec = timed.seconds%60
    if hr > 0:
        printout("Execution time: %d hours, %d minutes, %d seconds." % (hr, min, sec))
    elif min > 0:
        printout("Execution time: %d minutes, %d seconds." % (min, sec))
    elif sec > 0:
        printout("Execution time: %d seconds." % sec)
    
    printout("***********************************************************************")  
    uninit_logging()

    if pass_all:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
